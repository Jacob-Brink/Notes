Script started on 2020-04-29 15:50:21-0400
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ada[00m$ cat *Ad[K[K.adb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/24/2020
-- Lab: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


   ----------------------------------------------------
   -- initialization                                  -
   -- Receive: A_Bird, a Bird_Type;                   -
   --          Name, a String                         -
   -- Return: a Bird_Type in which My_Name = Name.    -
   ----------------------------------------------------
   procedure Init(A_Bird : out Bird_Type; Name : in String) is
   begin
      A_Bird.My_Name := Name;
   end Init;
   
   ----------------------------------------------------
   -- Name accessor                                   -
   -- Receive: A_Bird, a Bird_Type.                   -
   -- Return: A_Bird.My_Name.                         -
   ----------------------------------------------------
   function Name(A_Bird : in Bird_Type) return String is
   begin
      return A_Bird.My_Name;
   end Name;
   
   -- A Bird's Call                                   -
   -- Receive: A_Bird, a Bird_Type.                   -
   -- Return: a default bird-call ("Squawk!").        -
   ----------------------------------------------------
   function Call(A_Bird : in Bird_Type) return String is
   begin
      return "Squawwwwwwk!";
   end Call;

   ----------------------------------------------------
   -- Determine type of a Bird (for derived types)    -
   -- Receive: A_Bird, a Bird_Type.                   -
   -- Return: "Bird".                                 -
   ----------------------------------------------------
   function Type_Name(A_Bird : in Bird_Type) return String is
   begin
      return "Bird";
   end Type_Name;
   
   ----------------------------------------------------
   -- A Bird's movement                               -
   -- Receive: A_Bird, a Bird_Type                    -
   -- Output: Movement Description                    -
   ----------------------------------------------------
   function Movement(A_Bird : in Bird_Type) return String is
   begin
      return "Movement not specified";
   end Movement;
   
   ----------------------------------------------------
   -- Output a Bird                                   -
   -- Receive: A_Bird, a Bird or subclass of Bird.    -
   -- Output: Everything known about A_Bird           -
   ----------------------------------------------------
   procedure Put(A_Bird : in Bird_Type'Class) is
   begin
      Put( Name(A_Bird) );
      Put( ' ' );
      Put( Type_Name(A_Bird) );
      Put( " just " );
      Put( Movement(A_Bird) );
      Put(" past and said, """);
      Put( Call(A_Bird) );
      Put(" "" ");
   end Put; 
end Bird_Package;

-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Bird_Package, 
  Duck_Package, 
  Goose_Package, 
  Owl_Package,
  Ostrich_Package,
  Penguin_Package,
  Kiwi_Package,
  Ada.Text_IO;
use Bird_Package,
  Duck_Package, 
  Goose_Package,
  Owl_Package,
  Ostrich_Package,
  Penguin_Package,
  Kiwi_Package,
  Ada.Text_IO;


procedure Birds is

   Bird1 : Bird_Type;       -- base class
   Bird2 : Duck_Type;       -- derived class 1
   Bird3 : Goose_Type;      -- derived class 2
   Bird4 : Owl_Type;        -- derived class 3
   
   Bird5 : Ostrich_Type;     -- derived class 4
   Bird6 : Penguin_Type;     -- derived class 5
   Bird7 : Kiwi_Type;      -- derived class 6

begin
   Put("Welcome to the Bird Park!"); New_Line;
   Init(Bird1, "Tweety");
   Put(Bird1); New_Line;

   Init(Bird2, "Donald");
   Put(Bird2); New_Line;

   Init(Bird3, "Mother");
   Put(Bird3); New_Line;

   Init(Bird4, "Woodsy");
   Put(Bird4); New_Line;
   
   Init(Bird5, "Jacobb");
   Put(Bird5); New_Line;
   
   Init(Bird6, "123456");
   Put(Bird6); New_Line;
   
   Init(Bird7, "Brinki");
   Put(Bird7); New_Line;
   
    
   New_Line;
end Birds;

-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

   ----------------------------------------------------
   -- A Duck's Call (Over-rides Bird.Call())          -
   -- Receive: A_Duck, a Duck_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function Call(A_Duck : in Duck_Type) return String is
   begin
      return "Quack!";
   end Call;

   ------------------------------------------------------------
   -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
   -- Receive: A_Duck, a Duck_Type.                          -
   -- Return: "Duck".                                        -
   -----------------------------------------------------------
   function Type_Name(A_Duck : in Duck_Type) return String is
   begin
      return "Duck";
   end Type_Name;

end Duck_Package;
-- flying_bird_package.adb defines Flying_Bird_Type methods
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------


package body Flying_Bird_Package is

   ----------------------------------------------------
   -- A Flying Bird's movement                        -
   -- Receive: A_Bird, a Flying_Bird_Type             -
   -- Output: Movement Description                    -
   ----------------------------------------------------
   function Movement(A_Flyer : in Flying_Bird_Type) return String is
   begin
      return "flew";
   end Movement;

end Flying_Bird_Package;
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

package body Goose_Package is

   ----------------------------------------------------
   -- A Goose's Call (Over-rides Bird.Call())         -
   -- Receive: A_Goose, a Goose_Type.                 -
   -- Return: "Honk!"                                 -
   ----------------------------------------------------
   function Call(A_Goose : in Goose_Type) return String is
   begin
      return "Honk!";
   end Call;

   -----------------------------------------------------
   -- Determine type of a Goose                        -
   -- (Over-rides Bird.Type_Name())                    -
   -- Receive: A_Goose, a Goose_Type.                  -
   -- Return: "Goose".                                 -
   -----------------------------------------------------
   function Type_Name(A_Goose : in Goose_Type) return String is
   begin
      return "Goose";
   end Type_Name;



end Goose_Package;
-- kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

   ----------------------------------------------------
   -- A Kiwi's Call (Over-rides Bird.Call())          -
   -- Receive: A_Kiwi, a Kiwi_Type.                   -
   -- Return: "*Kiwi Sounds*!"                                -
   ----------------------------------------------------
   function Call(A_Kiwi : in Kiwi_Type) return String is
   begin
      return "*Kiwi Sounds*!";
   end Call;

   ------------------------------------------------------------
   -- Determine type of a Kiwi (Over-rides Bird.Type_Name()) -
   -- Receive: A_Kiwi, a Kiwi_Type.                          -
   -- Return: "Kiwi".                                        -
   -----------------------------------------------------------
   function Type_Name(A_Kiwi : in Kiwi_Type) return String is
   begin
      return "Kiwi";
   end Type_Name;

end Kiwi_Package;
-- ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

   ----------------------------------------------------
   -- A Ostrich's Call (Over-rides Bird.Call())          -
   -- Receive: A_Ostrich, a Ostrich_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function Call(A_Ostrich : in Ostrich_Type) return String is
   begin
      return "*Ostrich Noises*";
   end Call;

   ------------------------------------------------------------
   -- Determine type of a Ostrich (Over-rides Bird.Type_Name()) -
   -- Receive: A_Ostrich, a Ostrich_Type.                          -
   -- Return: "Ostrich".                                        -
   -----------------------------------------------------------
   function Type_Name(A_Ostrich : in Ostrich_Type) return String is
   begin
      return "Ostrich";
   end Type_Name;

end Ostrich_Package;
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is

  ----------------------------------------------------
   -- A Owl's Call (Over-rides Bird.Call())           -
   -- Receive: An_Owl, an Owl_Type.                   -
   -- Return: "Whoo!"                                 -
   ----------------------------------------------------
   function Call(An_Owl : in Owl_Type) return String is
   begin
      return "Whoo!";
   end Call;

   -----------------------------------------------------
   -- Determine type of a Owl                          -
   -- (Over-rides Bird.Type_Name())                    -
   -- Receive: An_Owl, an Owl_Type.                    -
   -- Return: "Owl".                                   -
   -----------------------------------------------------
   function Type_Name(An_Owl : in Owl_Type) return String is
   begin
      return "Owl";
   end Type_Name;
   
end Owl_Package;
-- penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Penguin_Package is

   ----------------------------------------------------
   -- A Penguin's Call (Over-rides Bird.Call())          -
   -- Receive: A_Penguin, a Penguin_Type.                   -
   -- Return: "*Penguin Sounds*!"                                -
   ----------------------------------------------------
   function Call(A_Penguin : in Penguin_Type) return String is
   begin
      return "*Penguin Sounds*!";
   end Call;

   ------------------------------------------------------------
   -- Determine type of a Penguin (Over-rides Bird.Type_Name()) -
   -- Receive: A_Penguin, a Penguin_Type.                          -
   -- Return: "Penguin".                                        -
   -----------------------------------------------------------
   function Type_Name(A_Penguin : in Penguin_Type) return String is
   begin
      return "Penguin";
   end Type_Name;

end Penguin_Package;
Script started on 2020-04-29 15:50:21-0400
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ada[00m$ cat *Ad[K[K.adb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/24/2020
-- Lab: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


   ----------------------------------------------------
   -- initialization                                  -
   -- Receive: A_Bird, a Bird_Type;                   -
   --          Name, a String                         -
   -- Return: a Bird_Type in which My_Name = Name.    -
   ----------------------------------------------------
   procedure Init(A_Bird : out Bird_Type; Name : in String) is
   begin
      A_Bird.My_Name := Name;
   end Init;
   
   ----------------------------------------------------
   -- Name accessor                                   -
   -- Receive: A_Bird, a Bird_Type.                   -
   -- Return: A_Bird.My_Name.                         -
   ----------------------------------------------------
   function Name(A_Bird : in Bird_Type) return String is
   begin
      return A_Bird.My_Name;
   end Name;
   
   -- A Bird's Call                                   -
   -- Receive: A_Bird, a Bird_Type.                   -
   -- Return: a default bird-call ("Squawk!").        -
   ----------------------------------------------------
   function Call(A_Bird : in Bird_Type) return String is
   begin
      return "Squawwwwwwk!";
   end Call;

   ----------------------------------------------------
   -- Determine type of a Bird (for derived types)    -
   -- Receive: A_Bird, a Bird_Type.                   -
   -- Return: "Bird".                                 -
   ----------------------------------------------------
   function Type_Name(A_Bird : in Bird_Type) return String is
   begin
      return "Bird";
   end Type_Name;
   
   ----------------------------------------------------
   -- A Bird's movement                               -
   -- Receive: A_Bird, a Bird_Type                    -
   -- Output: Movement Description                    -
   ----------------------------------------------------
   function Movement(A_Bird : in Bird_Type) return String is
   begin
      return "Movement not specified";
   end Movement;
   
   ----------------------------------------------------
   -- Output a Bird                                   -
   -- Receive: A_Bird, a Bird or subclass of Bird.    -
   -- Output: Everything known about A_Bird           -
   ----------------------------------------------------
   procedure Put(A_Bird : in Bird_Type'Class) is
   begin
      Put( Name(A_Bird) );
      Put( ' ' );
      Put( Type_Name(A_Bird) );
      Put( " just " );
      Put( Movement(A_Bird) );
      Put(" past and said, """);
      Put( Call(A_Bird) );
      Put(" "" ");
   end Put; 
end Bird_Package;

-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Bird_Package, 
  Duck_Package, 
  Goose_Package, 
  Owl_Package,
  Ostrich_Package,
  Penguin_Package,
  Kiwi_Package,
  Ada.Text_IO;
use Bird_Package,
  Duck_Package, 
  Goose_Package,
  Owl_Package,
  Ostrich_Package,
  Penguin_Package,
  Kiwi_Package,
  Ada.Text_IO;


procedure Birds is

   Bird1 : Bird_Type;       -- base class
   Bird2 : Duck_Type;       -- derived class 1
   Bird3 : Goose_Type;      -- derived class 2
   Bird4 : Owl_Type;        -- derived class 3
   
   Bird5 : Ostrich_Type;     -- derived class 4
   Bird6 : Penguin_Type;     -- derived class 5
   Bird7 : Kiwi_Type;      -- derived class 6

begin
   Put("Welcome to the Bird Park!"); New_Line;
   Init(Bird1, "Tweety");
   Put(Bird1); New_Line;

   Init(Bird2, "Donald");
   Put(Bird2); New_Line;

   Init(Bird3, "Mother");
   Put(Bird3); New_Line;

   Init(Bird4, "Woodsy");
   Put(Bird4); New_Line;
   
   Init(Bird5, "Jacobb");
   Put(Bird5); New_Line;
   
   Init(Bird6, "123456");
   Put(Bird6); New_Line;
   
   Init(Bird7, "Brinki");
   Put(Bird7); New_Line;
   
    
   New_Line;
end Birds;

-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

   ----------------------------------------------------
   -- A Duck's Call (Over-rides Bird.Call())          -
   -- Receive: A_Duck, a Duck_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function Call(A_Duck : in Duck_Type) return String is
   begin
      return "Quack!";
   end Call;

   ------------------------------------------------------------
   -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
   -- Receive: A_Duck, a Duck_Type.                          -
   -- Return: "Duck".                                        -
   -----------------------------------------------------------
   function Type_Name(A_Duck : in Duck_Type) return String is
   begin
      return "Duck";
   end Type_Name;

end Duck_Package;
-- flying_bird_package.adb defines Flying_Bird_Type methods
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------


package body Flying_Bird_Package is

   ----------------------------------------------------
   -- A Flying Bird's movement                        -
   -- Receive: A_Bird, a Flying_Bird_Type             -
   -- Output: Movement Description                    -
   ----------------------------------------------------
   function Movement(A_Flyer : in Flying_Bird_Type) return String is
   begin
      return "flew";
   end Movement;

end Flying_Bird_Package;
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

package body Goose_Package is

   ----------------------------------------------------
   -- A Goose's Call (Over-rides Bird.Call())         -
   -- Receive: A_Goose, a Goose_Type.                 -
   -- Return: "Honk!"                                 -
   ----------------------------------------------------
   function Call(A_Goose : in Goose_Type) return String is
   begin
      return "Honk!";
   end Call;

   -----------------------------------------------------
   -- Determine type of a Goose                        -
   -- (Over-rides Bird.Type_Name())                    -
   -- Receive: A_Goose, a Goose_Type.                  -
   -- Return: "Goose".                                 -
   -----------------------------------------------------
   function Type_Name(A_Goose : in Goose_Type) return String is
   begin
      return "Goose";
   end Type_Name;



end Goose_Package;
-- kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

   ----------------------------------------------------
   -- A Kiwi's Call (Over-rides Bird.Call())          -
   -- Receive: A_Kiwi, a Kiwi_Type.                   -
   -- Return: "*Kiwi Sounds*!"                                -
   ----------------------------------------------------
   function Call(A_Kiwi : in Kiwi_Type) return String is
   begin
      return "*Kiwi Sounds*!";
   end Call;

   ------------------------------------------------------------
   -- Determine type of a Kiwi (Over-rides Bird.Type_Name()) -
   -- Receive: A_Kiwi, a Kiwi_Type.                          -
   -- Return: "Kiwi".                                        -
   -----------------------------------------------------------
   function Type_Name(A_Kiwi : in Kiwi_Type) return String is
   begin
      return "Kiwi";
   end Type_Name;

end Kiwi_Package;
-- ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

   ----------------------------------------------------
  -- walking_bird_package.adb defines Walking_Bird_Type methods
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------


package body Walking_Bird_Package is

   ----------------------------------------------------
   -- A Walking Bird's movement                        -
   -- Receive: A_Bird, a Walking_Bird_Type             -
   -- Output: Movement Description                    -
   ----------------------------------------------------
   function Movement(A_Walker : in Walking_Bird_Type) return String is
   begin
      return "walked";
   end Movement;

end Walking_Bird_Package;
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ada[00m$ cat *.ads
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------


package Bird_Package is

type Bird_Type is tagged private;
 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------
procedure Init(A_Bird : out Bird_Type; Name : in String);
 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
function  Name(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
function  Call(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
function  Type_Name(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
procedure Put(A_Bird : in Bird_Type'Class);

 ----------------------------------------------------
 -- A Bird's movement                               -
 -- Receive: A_Bird, a Bird_Type                    -
 -- Output: Movement Description        d           -
 ----------------------------------------------------
function Movement(A_Bird : in Bird_Type) return String;


private
type Bird_Type is
          tagged record
            My_Name : String(1..6);
          end record;

end Bird_Package;
-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Flying_Bird_Package; use Flying_Bird_Package;

package Duck_Package is

   type Duck_Type is new Flying_Bird_Type with private;
   ----------------------------------------------------
   -- A Duck's Call (Over-rides Bird.Call())          -
   -- Receive: A_Duck, a Duck_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function  Call(A_Duck : in Duck_Type) return String;

   ------------------------------------------------------------
   -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
   -- Receive: A_Duck, a Duck_Type.                          -
   -- Return: "Duck".                                        -
   -----------------------------------------------------------
   function  Type_Name(A_Duck : in Duck_Type) return String;

private
   type Duck_Type is new Flying_Bird_Type with
      record
	 null;
      end record;
end Duck_Package;
-- flying_bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Bird_Package; use Bird_Package;

package Flying_Bird_Package is
   
   type Flying_Bird_Type is new Bird_Type with private;
   
   function Movement(A_Flyer : in Flying_Bird_Type) return String;

private
   type Flying_Bird_Type is new Bird_Type with
      record
	 null;
      end record;

end Flying_Bird_Package;
-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Flying_Bird_Package; use Flying_Bird_Package;

package Goose_Package is

 type Goose_Type is new Flying_Bird_Type with private;


 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
function  Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
function  Type_Name(A_Goose : in Goose_Type) return String;

private
type Goose_Type is new Flying_Bird_Type with
          record
            null;
          end record;

end Goose_Package;
-- kiwi_package.ads gives Kiwi-related declarations,
--
--  and derives Kiwi from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Walking_Bird_Package; use Walking_Bird_Package;

package Kiwi_Package is

   type Kiwi_Type is new Walking_Bird_Type with private;
   ----------------------------------------------------
   -- A Kiwi's Call (Over-rides Bird.Call())          -
   -- Receive: A_Kiwi, a Kiwi_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function  Call(A_Kiwi : in Kiwi_Type) return String;

   ------------------------------------------------------------
   -- Determine type of a Kiwi (Over-rides Bird.Type_Name()) -
   -- Receive: A_Kiwi, a Kiwi_Type.                          -
   -- Return: "Kiwi".                                        -
   -----------------------------------------------------------
   function  Type_Name(A_Kiwi : in Kiwi_Type) return String;

private
   type Kiwi_Type is new Walking_Bird_Type with
      record
	 null;
      end record;
end Kiwi_Package;
-- ostrich_package.ads gives Ostrich-related declarations,
--
--  and derives Ostrich from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Walking_Bird_Package; use Walking_Bird_Package;

package Ostrich_Package is

   type Ostrich_Type is new Walking_Bird_Type with private;
   ----------------------------------------------------
   -- A Ostrich's Call (Over-rides Bird.Call())          -
   -- Receive: A_Ostrich, a Ostrich_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function  Call(A_Ostrich : in Ostrich_Type) return String;

   ------------------------------------------------------------
   -- Determine type of a Ostrich (Over-rides Bird.Type_Name()) -
   -- Receive: A_Ostrich, a Ostrich_Type.                          -
   -- Return: "Ostrich".                                        -
   -----------------------------------------------------------
   function  Type_Name(A_Ostrich : in Ostrich_Type) return String;

private
   type Ostrich_Type is new Walking_Bird_Type with
      record
	 null;
      end record;
end Ostrich_Package;
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Flying_Bird.
--
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Flying_Bird_Package; use Flying_Bird_Package;

package Owl_Package is
   
   type Owl_Type is new Flying_Bird_Type with private;

   ----------------------------------------------------
   -- A Owl's Call (Over-rides Flying_Bird.Call())           -
   -- Receive: An_Owl, an Owl_Type.                   -
   -- Return: "Whoo!"                                 -
   ----------------------------------------------------
   function Call(An_Owl : in Owl_Type) return String;

   -----------------------------------------------------
   -- Determine type of a Owl                          -
   -- (Over-rides Flying_Bird.Type_Name())                    -
   -- Receive: An_Owl, an Owl_Type.                    -
   -- Return: "Owl".                                   -
   -----------------------------------------------------
   function Type_Name(An_Owl : in Owl_Type) return String;
private
   type Owl_Type is new Flying_Bird_Type with
      record
	 null;
      end record;


end Owl_Package;
-- penguin_package.ads gives Penguin-related declarations,
--
--  and derives Penguin from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------

with Walking_Bird_Package; use Walking_Bird_Package;

package Penguin_Package is

   type Penguin_Type is new Walking_Bird_Type with private;
   ----------------------------------------------------
   -- A Penguin's Call (Over-rides Bird.Call())          -
   -- Receive: A_Penguin, a Penguin_Type.                   -
   -- Return: "Quack!"                                -
   ----------------------------------------------------
   function  Call(A_Penguin : in Penguin_Type) return String;

   ------------------------------------------------------------
   -- Determine type of a Penguin (Over-rides Bird.Type_Name()) -
   -- Receive: A_Penguin, a Penguin_Type.                          -
   -- Return: "Penguin".                                        -
   -----------------------------------------------------------
   function  Type_Name(A_Penguin : in Penguin_Type) return String;

private
   type Penguin_Type is new Walking_Bird_Type with
      record
	 null;
      end record;
end Penguin_Package;
-- walking_bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/29/2020
-- Project: 10
-----------------------------------------------------
with Bird_Package; use Bird_Package;

package Walking_Bird_Package is

   type Walking_Bird_Type is new Bird_Type with private;
   
   function Movement(A_Walker : in Walking_Bird_Type) return String;

private
   type Walking_Bird_Type is new Bird_Type with
      record
	 null;
      end record;

end Walking_Bird_Package;
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ada[00m$ gnatmake birds.adb
gnatmake: "birds" up to date.
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ada[00m$ ./birds
Welcome to the Bird Park!
Tweety Bird just Movement not specified past and said, "Squawwwwwwk! " 
Donald Duck just flew past and said, "Quack! " 
Mother Goose just flew past and said, "Honk! " 
Woodsy Owl just flew past and said, "Whoo! " 
Jacobb Ostrich just walked past and said, "*Ostrich Noises* " 
123456 Penguin just walked past and said, "*Penguin Sounds*! " 
Brinki Kiwi just walked past and said, "*Kiwi Sounds*! " 

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ada[00m$ exit

Script done on 2020-04-29 15:50:38-0400
Script started on 2020-04-29 15:44:12-0400
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Bird.java
/* Bird.java provides a Bird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

import java.io.*;

public abstract class Bird
{

    /* default constructor
     * PostCond: myName == "".
     */
    public Bird() {
	myName = "";
    }

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Bird(String name) {
	myName = name;
    }

    /* Name accessor
     * Return: myName.
     */
    public String getName() {
	return myName;
    }

    /* A Bird's Call
     * Return: a default bird-call ("Squawk!").
     */
    public String call() {
	return "Squaaaaaaaawk";
    }

    /* Output a Bird 
     * Output: Everything known about myself
     *          to the standard output stream.
     */
	public void print()
    {
	System.out.println( getName() + ' ' + getClass().getName() + " just " + movement() + " past and said, " + call() );
    } 

    private String myName;

    /* movement abstract to be implemented by subclasses
     * Returns: movement description
     */
    public abstract String movement();
}

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Birds.java
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Birds {
  
    public static void main(String[] args) {
	System.out.println("\nWelcome to the Bird Park!\n");

	Bird bird0 = new WalkingBird();

	Bird bird1 = new WalkingBird("*Walking Bird Name*");
	bird1.print();

	Bird b0 = new FlyingBird();
	
	Bird b1 = new FlyingBird("*Flying Bird Name*");
	b1.print();

	Duck bird2 = new Duck("Donald");
	bird2.print();

	Goose bird3 = new Goose("Mother Goose");
	bird3.print();

	Owl bird4 = new Owl("Woodsey");
	bird4.print();

	Penguin bird5 = new Penguin("Super Tux");
	bird5.print();

	Ostrich bird6 = new Ostrich("Jacob");
	bird6.print();

	Kiwi bird7 = new Kiwi("Kiwi");
	bird7.print();

	System.out.println();
    }
}

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Duck.java
/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Duck extends FlyingBird {
    
    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Duck(String name)
    {     
	super(name);
    } 

    
    public Duck() {
	super();
    }

    /* A Duck's Call
     * Return: a duck-call ("Quack!").
     */
    public String call()
    {
	return "Quack!";
    } 
}

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat FlyingBird.java
/* FlyingBird.java provides a FlyingBird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

import java.io.*;

public class FlyingBird extends Bird
{

    /* default constructor
     * PostCond: myName == "".
     */
    public FlyingBird() {
	super();
    }

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public FlyingBird(String name) {
	super(name);
    }

    /* movement
     * Returns: movement description
     */
    @Override
    public String movement() {
	return "flew";
    }
     
}

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Goose.java
/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Goose extends FlyingBird {

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Goose(String name)
    {     
	super(name);
    }

    
    public Goose()
    {
	super();
    }

    /* A Goose's Call
     * Return: a goose-call ("Honk!").
     */
    public String call()
    {
	return "Honk!";
    }  

    
} 

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Kiwi.java
/* Kiwi.java provides an Kiwi subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Kiwi extends WalkingBird {

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Kiwi() {
	super();
    }
    
    public Kiwi(String name) {
	super(name);
    }


    /* An Kiwi's Call
     * Return: an kiwi-call ("Whoo-hoo!").
     */
    public String call() {
	return "*Kiwi Noises*";
    }

    
} 

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Ostrich.java
/* Ostrich.java provides an Ostrich subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Ostrich extends WalkingBird {

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Ostrich() {
	super();
    }
    
    public Ostrich(String name) {
	super(name);
    }


    /* An Ostrich's Call
     * Return: an ostrich-call ("Whoo-hoo!").
     */
    public String call() {
	return "*Ostrich Noises*";
    }

    
} 

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ C[Kcat Owl.java
/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Owl extends FlyingBird {

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Owl() {
	super();
    }
    
    public Owl(String name) {
	super(name);
    }


    /* An Owl's Call
     * Return: an owl-call ("Whoo-hoo!").
     */
    public String call() {
	return "Whoo-hoo!";
    }

    
} 

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat Penguin.java
/* Penguin.java provides an Penguin subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

public class Penguin extends WalkingBird {

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public Penguin() {
	super();
    }
    
    public Penguin(String name) {
	super(name);
    }


    /* An Penguin's Call
     * Return: an penguin-call ("Whoo-hoo!").
     */
    public String call() {
	return "*Penguin Noises*";
    }

    
} 

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat walkingir[K[K[KBird.jvaa[C[C[C[1PalkinBird.jvaaWalkinBird.jvaa
cat: WalkinBird.jvaa: No such file or directory
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat WalkinBird.jvaa[CgBird.jvaa
cat: WalkingBird.jvaa: No such file or directory
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ cat WalkingBird.jvaaavaa[C[C[C[K
/* WalkingBird.java provides a WalkingBird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/29/2020
 * Project: 10
 ******************************************************/

import java.io.*;

public class WalkingBird extends Bird
{

    /* default constructor
     * PostCond: myName == "".
     */
    public WalkingBird() {
	super();
    }

    /* explicit constructor
     * Receive: name, a String 
     * PostCond: myName == name.
     */
    public WalkingBird(String name) {
	super(name);
    }

    /* movement
     * Returns: movement description
     */
    @Override
    public String movement() {
	return "walked";
    }
     
}

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ ruby birds.jav[K[K[K[K[K[K[K[K[K[K[K[K[K[Kjavac birds.java
error: file not found: birds.java
Usage: javac <options> <source files>
use --help for a list of possible options
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ javac birds.java[C[1Pirds.javaBirds.java[1@o[1@o[1@p[1@s[1@ 
oops: command not found
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ oops javac Birds.java[C[C[1P[1P[1P[1P[1P
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ java Birds

Welcome to the Bird Park!

*Walking Bird Name* WalkingBird just walked past and said, Squaaaaaaaawk
*Flying Bird Name* FlyingBird just flew past and said, Squaaaaaaaawk
Donald Duck just flew past and said, Quack!
Mother Goose Goose just flew past and said, Honk!
Woodsey Owl just flew past and said, Whoo-hoo!
Super Tux Penguin just walked past and said, *Penguin Noises*
Jacob Ostrich just walked past and said, *Ostrich Noises*
Kiwi Kiwi just walked past and said, *Kiwi Noises*

]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/java[00m$ exit

Script done on 2020-04-29 15:47:01-0400
Script started on 2020-04-29 15:38:56-0400
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ ruby birds.rb[1Pcat[C[C[C[C[C[C[C[C[CWalkingBird.rb[4PPenguin.rb[4POwl.rbstrich.rb[3PKiwi.rbGoose.rbFlyingBird.rb[6PDuck.rbBird.rb[7Pexitcat Bird.rb
# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

class Bird

  attr_reader :name

  def initialize(name)
    @name = name
  end

  def call()
    "Squaaaaawk!"
  end

  def className
    self.class.to_s
  end

  def movement
    "error"
  end
  
  def print()
    puts @name + ", a " + className + " " + movement + " past, said, \"" + call + "\""
  end

  
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat Bird.rbruby birds.rb[1Pcat[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K Duck.rb
# Duck.rb | Defines the Duck class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './FlyingBird.rb'

class Duck < FlyingBird
  def call
    'Quack!'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat FlyingBird.rb
# FlyingBird.rb | Defines the FlyingBird class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './Bird.rb'

class FlyingBird < Bird
  def movement
    'flew'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat g[KGoose.rb 
# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './FlyingBird.rb'

class Goose < FlyingBird
  def call
    'Honk!'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat Kiwi.rb
# Kiwi.rb | Defines the Kiwi class which inherits attributes and methods
#   from the WalkingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './WalkingBird.rb'

class Kiwi < WalkingBird
  def call
    '*Kiwi Noises*'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ catO[K Osti[Krich.rb
# Ostrich.rb | Defines the Ostrich class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './WalkingBird.rb'

class Ostrich < WalkingBird
  def call
    '*Ostrich Noises*'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat Owl.rb
# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './FlyingBird.rb'

class Owl < FlyingBird
  def call
    'Whoo-hoo'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat Penguin.rb
# Penguin.rb | Defines the Penguin class which inherits attributes and methods
#   from the WalkingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './WalkingBird.rb'

class Penguin < WalkingBird
  def call
    '*Penguin Noises*'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat WalkingBird.rb 
# WalkingBird.rb | Defines the WalkingBird class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
####################################################

require './Bird.rb'

class WalkingBird < Bird
  def movement
    'walked'
  end
end
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ cat birds.rb
# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/29/2020
# Project: 10
######################################################

require './Bird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'
require './Ostrich.rb'
require './Penguin.rb'
require './Kiwi.rb'

puts "\nWelcome to the Bird Park!\n\n"


bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

bird4 = Ostrich.new "*Ostrich Name*"
bird4.print

bird5 = Penguin.new "*Penguin Name*"
bird5.print

bird6 = Kiwi.new "*Kiwi Name*"
bird6.print


puts "\n\n"
]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ ruby birds.rb

Welcome to the Bird Park!

Donald, a Duck flew past, said, "Quack!"
Mother, a Goose flew past, said, "Honk!"
Woodsey, a Owl flew past, said, "Whoo-hoo"
*Ostrich Name*, a Ostrich walked past, said, "*Ostrich Noises*"
*Penguin Name*, a Penguin walked past, said, "*Penguin Noises*"
*Kiwi Name*, a Kiwi walked past, said, "*Kiwi Noises*"


]0;jacob@DESKTOP-TMA4I98: ~/214/projects/10/ruby[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/projects/10/ruby[00m$ exit

Script done on 2020-04-29 15:40:00-0400
